/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'eclipse'
    id 'org.springframework.boot' version '2.6.2'
    id 'com.diffplug.spotless' version '6.19.0' apply false
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2')
    }

    maven {
        url = uri('https://jfrog.sandbox.fynarfin.io/artifactory/fyn-libs-snapshot')
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter:2.2.2.RELEASE'
    implementation('org.springframework.boot:spring-boot-starter-web:2.6.2')
    implementation('org.springframework.boot:spring-boot-starter-actuator:2.6.2')
    implementation 'io.micrometer:micrometer-registry-prometheus:1.10.2'
    implementation 'org.apache.camel:camel-endpointdsl:3.4.0'
    implementation 'org.apache.camel:camel-jetty:3.4.0'
    implementation 'org.apache.camel:camel-undertow:3.4.0'
    implementation 'org.apache.camel:camel-http:3.4.0'
    implementation 'org.apache.camel.springboot:camel-jackson-starter:3.4.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.1'
    implementation 'org.json:json:20190722'
    implementation 'io.camunda:zeebe-client-java:8.1.1'
    implementation 'com.auth0:java-jwt:3.10.2'
    implementation 'com.google.code.gson:gson:2.3.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE'
}

group = 'org.mifos'
description = 'ph-ee-connector-ams-pesacore'
sourceCompatibility = '1.8'

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

allprojects {
    apply plugin: 'com.diffplug.spotless'

    // Configuration for the spotless plugin
    // https://github.com/diffplug/spotless/tree/main/plugin-gradle
    spotless {
        format 'misc', {
            target '**/*.md', '**/*.properties', '**/.gitignore', '**/.openapi-generator-ignore', '**/*.yml', '**/*.xml', '**/**.json', '**/*.sql'
            targetExclude '**/build/**', '**/bin/**', '**/.settings/**', '**/.idea/**', '**/.gradle/**', '**/gradlew.bat'
            indentWithSpaces(4)
            endWithNewline()
            trimTrailingWhitespace()
        }

        groovyGradle {
            target '*.gradle', '**/*.gradle'
            targetExclude '**/build/**'
            greclipse()
            indentWithSpaces(4)
            endWithNewline()
            trimTrailingWhitespace()
        }
        java {
            targetExclude '**/build/**', '**/bin/**', '**/out/**', '**/megalinter-reports/**'
            importOrder() //sort imports alphabetically
            removeUnusedImports()
            eclipse().configFile "$rootDir/config/dev-formatter.xml"
            endWithNewline()
            trimTrailingWhitespace()

            // Enforce style modifier order
            custom 'Modifier ordering', {
                def modifierRanking = [
                    public      : 1,
                    protected   : 2,
                    private     : 3,
                    abstract    : 4,
                    default     : 5,
                    static      : 6,
                    final       : 7,
                    transient   : 8,
                    volatile    : 9,
                    synchronized: 10,
                    native      : 11,
                    strictfp    : 12]
                // Find any instance of multiple modifiers. Lead with a non-word character to avoid
                // accidental matching against for instance, "an alternative default value"
                it.replaceAll(/\W(?:public |protected |private |abstract |default |static |final |transient |volatile |synchronized |native |strictfp ){2,}/, {
                    // Do not replace the leading non-word character.  Identify the modifiers
                    it.replaceAll(/(?:public |protected |private |abstract |default |static |final |transient |volatile |synchronized |native |strictfp ){2,}/, {
                        // Sort the modifiers according to the ranking above
                        it.split().sort({ modifierRanking[it] }).join(' ') + ' '
                    }
                    )
                }
                )
            }
        }

        lineEndings 'UNIX'
    }

    compileJava.dependsOn spotlessCheck
}

test {
    useJUnitPlatform()
}
